<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:mate="http://mate.asfusion.com/"
	mouseDown="doMouseDown()" mouseMove="doMouseMove()" mouseUp="doMouseUp()" creationComplete="init()" visible="false" 
	mouseOver="setCursor()" mouseOut="removeCursor()" implements="org.bigbluebutton.common.IBbbCanvas">
	<mx:Script>
		<![CDATA[			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.managers.CursorManager;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.whiteboard.WhiteboardCanvasModel;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObjectFactory;
			import org.bigbluebutton.modules.whiteboard.business.shapes.ShapeFactory;
			import org.bigbluebutton.modules.whiteboard.events.PageEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardPresenterEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardUpdate;
			import org.bigbluebutton.modules.whiteboard.maps.WhiteboardEventMap;
			
			public var model:WhiteboardCanvasModel;			
			private var bbbCanvas:IBbbCanvas;

			private var _xPosition:int;
			private var _yPosition:int;
			private var images:Images = new Images();
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			private var whiteboardEnabled:Boolean = false;
			private var showWhiteboard:Boolean = true;

			
			private function init():void{
				this.label = "Highlighter";
			}
			
			private function doMouseUp():void {
				model.doMouseUp();
			}

			private function doMouseDown():void{
				model.doMouseDown(this.mouseX, this.mouseY);
			}
						
			private function doMouseMove():void{
				model.doMouseMove(this.mouseX, this.mouseY);
			}
			
			public function sendShapeToServer(dobj:DrawObject):void{
				var event:WhiteboardDrawEvent = new WhiteboardDrawEvent(WhiteboardDrawEvent.SEND_SHAPE);
				event.message = dobj;
				dispatchEvent(event);					
			}
			
			public function setShape(s:String):void{
				model.setShape(s);
			}
				
			public function changeColor(e:Event):void{
				model.changeColor(e.target.selectedColor);
			}
	
			public function changeThickness(e:Event):void{
				model.changeThickness(e.target.value);
			}
					
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
									
			private function setWhiteboardVisibility():void{
				if (this.whiteboardEnabled && this.showWhiteboard) this.visible = true;
				else this.visible = false;
			}
			
			private function setCursor():void{
				CursorManager.setCursor(pencil_icon);
			}
			
			private function removeCursor():void{
				CursorManager.removeCursor(CursorManager.currentCursorID);
				doMouseUp();
			}
			
			/** Inherited from org.bigbluebutton.common.IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				this.bbbCanvas.addRawChild(child);
			}
			
			public function removeRawChild(child:DisplayObject):void{
				this.bbbCanvas.removeRawChild(child);
			}
			
			public function doesContain(child:DisplayObject):Boolean{
				return bbbCanvas.doesContain(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				LogUtil.debug("WhiteboardCanvas::acceptOverlayCanvas()");
				LogUtil.debug("OVERLAYING PRESENTATION CANVAS");
				this.bbbCanvas = overlay;
				//Load existing shapes onto the canvas.
				dispatchEvent(new PageEvent(PageEvent.LOAD_PAGE));
			}
			
			public function moveCanvas(x:Number, y:Number):void {
				this.x = x;
				this.y = y;
			}
			
			public function getMouseXY():Array {
				return [this.mouseX, this.mouseY];
			}
			
			public function removeShape(child:DisplayObject):void {
				if (bbbCanvas == null) return;
				if (doesContain(child)) removeRawChild(child);
			}
			
			public function addShape(child:DisplayObject):void {
				if (bbbCanvas == null) return;
				addRawChild(child);
			}
						
			public function zoomCanvas(width:Number, height:Number):void {
				this.width = width;
				this.height = height;	
				model.zoomCanvas(width, height);
			}
					
			public function showCanvas(show:Boolean):void{
				this.showWhiteboard = show;
				setWhiteboardVisibility();
			}
			
			/** End IBBBCanvas*/
			
			public function isPageEmpty():Boolean {
				return model.isPageEmpty();
			}
			
			public function enableWhiteboard(e:WhiteboardButtonEvent):void{
				this.whiteboardEnabled = true;
				setWhiteboardVisibility();
			}
			
			public function disableWhiteboard(e:WhiteboardButtonEvent):void{
				this.whiteboardEnabled = false;
				setWhiteboardVisibility();
			}
			
		]]>
	</mx:Script>
</mx:Canvas>
