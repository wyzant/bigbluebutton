<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<pubVid:VideoWindowItf xmlns="org.bigbluebutton.modules.videoconf.business.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:pubVid="org.bigbluebutton.modules.videoconf.business.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="init()"
	width="{defaultWidth + 6}" height="{defaultHeight + 75}" 
	xmlns:mate="http://mate.asfusion.com/"
	resize="onResize()"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	layout="absolute">
	
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.events.OpenVideoWindowEvent;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] public var camIcon:Class = images.control_play;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;

			[Bindable] private var defaultWidth:Number = 320;
			[Bindable] private var defaultHeight:Number = 240;
			
			private var camWidth:Number = 320;
			private var camHeight:Number = 240;
			private var _userrole:String;
			private var _camera:Camera = null;
			public var quality:Number = 0;
						
			// Timer to auto-publish webcam. We need this timer to delay
			// the auto-publishing until after the Viewers's window has loaded
			// to receive the publishing events. Otherwise, the user joining next
			// won't be able to view the webcam.
			private var autoPublishTimer:Timer;
			
			// Timer used to enable the start publishing button, only after get
			// any activity on the camera. It avoids the problem of publishing
			// a blank video
			private var _activationTimer:Timer = null;
			private var _waitingForActivation:Boolean = false;
			
			static private var _cameraAccessDenied:Boolean = false;
			
			[Bindable]
			public var videoOptions:VideoConfOptions;
			
			private function init():void{
				_videoHolder = new UIComponent();
				_videoHolder.width = camWidth;
				_videoHolder.height = camHeight;
				this.addChild(_videoHolder);				
				this.title = ResourceUtil.getInstance().getString('bbb.publishVideo.title');

				checkIfMacCamera();
				if (isPresenter()) showResControls(true);
				if (Camera.names.length > 1) showVideoControls(true);
				if (!isPresenter() && Camera.names.length == 1) startPublishing();

				this.minWidth = _minWidth;
				this.minHeight = _minHeight;
				maximizeRestoreBtn.visible = false;
				this.resizable = false;
				
				loadPrefs();
				
				this.visible = videoOptions.publishWindowVisible;
				
				if (videoOptions.autoStart) {
					/*
					 * Need to have a timer to trigger auto-publishing of webcam.
					 */
					autoPublishTimer = new Timer(3000, 1);
					autoPublishTimer.addEventListener(TimerEvent.TIMER, autopublishTimerHandler);
					autoPublishTimer.start();
				}
				
				// start the camera preview
				updateCamera();
			}

			private function autopublishTimerHandler(event:TimerEvent):void {				
				startPublishing();
				autoPublishTimer.stop();
			}
						
			private function loadPrefs():void{
				var sharedObject:SharedObject = SharedObject.getLocal("bbbUserProperties", "/");
				var webcam:String = sharedObject.data["webcam"] as String;
				for (var i:Number = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == webcam) cmbCameraSelector.selectedIndex = i;
				}
			}
			
			private function updateCamera():void {
				stopCamera();
			
				btnStartPublish.enabled = false;
				
				if (Camera.names.length == 0) {
					showWarning('bbb.video.publish.hint.noCamera');
					return;
				}
				
				_camera = Camera.getCamera(cmbCameraSelector.selectedIndex.toString());
				if (_camera == null) {
					showWarning('bbb.video.publish.hint.cantOpenCamera');
					return;
				}
				
				_camera.setMotionLevel(5, 1000);

				if (_camera.muted) {
					if (_cameraAccessDenied) {
						onCameraAccessDisallowed();
						return;
					} else {
						showWarning('bbb.video.publish.hint.waitingApproval');
					}
				} else {
					// if the camera isn't muted, that is because the user has
					// previously allowed the camera capture on the flash privacy box
					onCameraAccessAllowed();
				}

			    _camera.addEventListener(ActivityEvent.ACTIVITY, onActivityEvent);
			    _camera.addEventListener(StatusEvent.STATUS, onStatusEvent);

				setComboResolution();
				
				_camera.setKeyFrameInterval(videoOptions.camKeyFrameInterval);
				_camera.setMode(camWidth, camHeight, videoOptions.camModeFps);
				_camera.setQuality(videoOptions.camQualityBandwidth, videoOptions.camQualityPicture);
				
				if (_camera.width != camWidth || _camera.height != camHeight) {
					LogUtil.debug("Resolution " + camWidth + "x" + camHeight + " is not supported, using " + _camera.width + "x" + _camera.height + " instead");
					setResolution(_camera.width, _camera.height);
				}				
				
				_video = new Video;
				_video.attachCamera(_camera);

				if (aspectRatio > _videoHolder.width / _videoHolder.height) {
					_video.width = _videoHolder.width;
					_video.height = _videoHolder.width / aspectRatio;
					_video.x = 0;
					_video.y = (_videoHolder.height - _video.height) / 2;
				} else {
					_video.width = _videoHolder.height * aspectRatio;
					_video.height = _videoHolder.height;
					_video.x = (_videoHolder.width - _video.width) / 2;
					_video.y = 0;
				}				

				_videoHolder.addChild(_video);
   			}
   			
			private function onActivityEvent(e:ActivityEvent):void {
			    if (_waitingForActivation && e.activating) {
			        _activationTimer.stop();
					showWarning('bbb.video.publish.hint.videoPreview', false, "0xFFFF00");
			     	btnStartPublish.enabled = true;
			     	_waitingForActivation = false;
			    }
			}

			private function onStatusEvent(e:StatusEvent):void {
				if (e.code == "Camera.Unmuted") {
					onCameraAccessAllowed();
					// this is just to overwrite the message of waiting for approval
				    showWarning('bbb.video.publish.hint.openingCamera');
			    } else if (e.code == "Camera.Muted") {
			    	onCameraAccessDisallowed();
			    }
			}
			
			private function onCameraAccessAllowed():void {
				// set timer to ensure that the camera activates.  If not, it might be in use by another application
				_waitingForActivation = true;
				if (_activationTimer != null)
					_activationTimer.stop();
			    _activationTimer = new Timer(10000, 1);
			    _activationTimer.addEventListener(TimerEvent.TIMER, activationTimeout);
			    _activationTimer.start();
			}
			
			private function onCameraAccessDisallowed():void {
		    	showWarning('bbb.video.publish.hint.cameraDenied');
		    	_cameraAccessDenied = true;
			}

			private function activationTimeout(e:TimerEvent):void {
				showWarning('bbb.video.publish.hint.cameraIsBeingUsed');
				// it will try to reopen the camera after the timeout
				updateCamera();
			}   			
						
			private function startPublishing():void{
				if (_camera == null) return;

				showWarning('bbb.video.publish.hint.publishing', true, "0xFFFF00");
				
				defaultWidth = originalWidth;
				defaultHeight = originalHeight;

				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = _camera;
				dispatchEvent(e);
				
				showVideoControls(false);
				showResControls(false);

				maximizeRestoreBtn.visible = true;
				this.resizable = true;
				onResize();
				
				addEventListener(MDIWindowEvent.RESIZE_START, onResizeStart);
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEnd);
				addEventListener(MDIWindowEvent.DRAG_START, onDragStart);
				addEventListener(MDIWindowEvent.DRAG, onDrag);
				addEventListener(MDIWindowEvent.DRAG_END, onDragEnd);
				addEventListener(MouseEvent.MOUSE_OVER, showButtons);
				addEventListener(MouseEvent.MOUSE_OUT, hideButtons);
				addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);
				
				createButtons();
				
				// this event will dock the window, if it's enabled
				var openVideoEvent:OpenVideoWindowEvent = new OpenVideoWindowEvent();
				openVideoEvent.window = this;
				dispatchEvent(openVideoEvent);					
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();
				super.close(event);
			}
			
			private function stopCamera():void {
				if (_video != null) {
					_videoHolder.removeChild(_video);
					_video.attachCamera(null);
					_video.clear();
					_video = null;
				}
				_camera = null;
			}
			
			private function stopPublishing():void{
				stopCamera();
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = streamName;
				dispatchEvent(e);
			}
			
			private function setComboResolution():void {
				var res:Array = cmbResolution.selectedLabel.split( "x" );
				setResolution(Number(res[0]), Number(res[1]));
			}
			
			private function setResolution(width:int, height:int):void {
				camWidth = originalWidth = width;
				camHeight = originalHeight = height;
				setAspectRatio(camWidth, camHeight);
				
 				/**
         		 * Add timestamp to create a unique stream name. This way we can record	 	
         		 * stream without overwriting previously recorded streams.	 	
         		 */	 	
				var curTime:Number = new Date().getTime();	 	
        		this.streamName = cmbResolution.selectedLabel.concat(this.userId) + "-" + curTime;
			}
			
			public function set userrole(role:String):void{
				this._userrole = role;
			}
			
			private function isPresenter():Boolean{
				if (this._userrole == "MODERATOR" || this._userrole == "PRESENTER") return true;
				else return false;
			}
			
			private function showVideoControls(show:Boolean):void{
				if (show){
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = true;
				} else{					
					videoOptionsBar.visible = false;
					videoOptionsBar.width = 0;
					videoOptionsBar.height = 0;
					btnStartPublish.visible = false;
					cmbCameraSelector.visible = false;
					videoOptionsBar.visible = false;
				}
			}
			
			private function showResControls(show:Boolean):void{
				if (show) cmbResolution.visible = true;
				else cmbResolution.visible = false;
			}
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				closeThisWindow();
			}
			
			private function closeThisWindow():void {
				stopCamera();
				this.close();
			}
			
			private function checkIfMacCamera():void{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video") {
						/**
						 * Set as default for Macs
						 */
						cmbCameraSelector.selectedIndex = i;
					}
				}
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
			}		
			
			
			private var hideWarningTimer:Timer = null;
			
			private function showWarning(resourceName:String, autoHide:Boolean=false, color:String="0xFF0000"):void {
				const text:String = ResourceUtil.getInstance().getString(resourceName);
				
				if (hideWarningTimer != null)
					hideWarningTimer.stop();
				if (autoHide) {
					hideWarningTimer = new Timer(3000, 1);
					hideWarningTimer.addEventListener(TimerEvent.TIMER, hideWarning);
					hideWarningTimer.start();
				}
				// bring the label to front
				setChildIndex(lblWarning, getChildren().length - 1);
				lblWarning.text = text;
				lblWarning.setStyle("color", color);
				lblWarning.visible = true;
				LogUtil.debug("Showing warning: " + text);
			}
			
			private function hideWarning(e:TimerEvent):void {
				lblWarning.visible = false;
			}
			
		]]>
	</mx:Script>

	<mx:Fade id="dissolveOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
	<mx:Fade id="dissolveIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
	<mx:Text id="lblWarning" width="100%" textAlign="right" fontSize="14" fontWeight="bold" y="{this.height - (videoOptionsBar.visible? videoOptionsBar.height: 0) - lblWarning.height - 30}" visible="false" selectable="false" hideEffect="{dissolveOut}" showEffect="{dissolveIn}"/>
	<mx:ControlBar id="videoOptionsBar" visible="true">
		<mx:Button id="btnStartPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.toolTip')}" icon="{camIcon}" click="startPublishing()" enabled="false"/>
		<mx:ComboBox id="cmbCameraSelector" dataProvider="{Camera.names}" width="150" visible="false" change="updateCamera()"/>
		<mx:ComboBox id="cmbResolution" dataProvider="{resolutions}" width="20%" visible="false" change="updateCamera()"/>
	</mx:ControlBar>
	
	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</pubVid:VideoWindowItf>
