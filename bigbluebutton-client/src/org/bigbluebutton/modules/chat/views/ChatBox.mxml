<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	click="setMessageRead()" verticalScrollPolicy="off"
	creationComplete="onCreationComplete()">
	
	<mate:Listener type="{ChatOptionsEvent.CHANGE_FONT_SIZE}" method="changeFontSize" />
	<mate:Listener type="{ShortcutEvent.ADVANCE_MESSAGE}" method="advanceMessage" />
	<mate:Listener type="{ShortcutEvent.GOBACK_MESSAGE}" method="goBackOneMessage" />
	<mate:Listener type="{ShortcutEvent.REPEAT_MESSAGE}" method="repeatMessage" />
	<mate:Listener type="{ShortcutEvent.GOLATEST_MESSAGE}" method="goToLatestMessage" />
	<mate:Listener type="{ShortcutEvent.GOFIRST_MESSAGE}" method="goToFirstMessage" />
	<mate:Listener type="{ShortcutEvent.GOREAD_MESSAGE}" method="goToLatestReadMessage" />
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.core.ScrollPolicy;
			import com.asfusion.mate.events.Dispatcher;	
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.modules.chat.events.ChatOptionsEvent;
			import org.bigbluebutton.modules.chat.model.ChatMessage;
			import org.bigbluebutton.modules.chat.model.ChatObject;
			import org.bigbluebutton.modules.chat.views.ChatMessageRenderer;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.main.events.ShortcutEvent;
			
			public static const COPY_ALL_BUTTON:String = "Copy All Text";
			
			public var read:Boolean = true;
			public var participantLoggedOut:Boolean = false;
			public var otherUserID:String;
			private var globalDispatcher:Dispatcher = new Dispatcher();
			
			[Bindable]
			private var backgroundColor:uint = 0x000000;
			private var lastSenderId:String = "";
			private var lastTime:String = "";
			
			[Bindable] private var messages:ArrayCollection = new ArrayCollection();
			private var lastCount:Number = 0;			
			private var scrollTimer:Timer;			
			private var scrollBarWorkaround:Boolean = false;
			private var currentMessage:int;
			private var latestMessage:int; 
			
			private var reachedLatest:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.reachedLatest');
			private var reachedFirst:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.reachedFirst');
			private var navLatestString:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.navigatedLatest');
			private var navRecentString:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.navigatedLatestRead');
			private var navFirstString:String = ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatBox.navigatedFirst');
			
			public var focus:Boolean = false;
			private var keyCombos:Object;
			
			private var navToFirst:Boolean = false;
			private var navToLatest:Boolean = false;
			private var spacerNeeded:Boolean = false;
			private var indicatorNeeded:Boolean = false
			private var repeat:Boolean = false;
			
			private function onCreationComplete():void {
				loadKeyCombos()
				addContextMenuItems();
				scrollTimer = new Timer(750, 2);
				scrollTimer.addEventListener(TimerEvent.TIMER, onScrollTimer);
				
				/**
				 * The next two lines will force the scrollbar to the end of the message when displaying the
				 * chat history.
				 */
				callLater(scrollToBottom);	
				scrollTimer.start();	
				
				// Initialize the indicator for the position in the message history, and add the listener for message history navigation
				currentMessage = 0;
				latestMessage = 0;
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);	
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing	
				// Initialize the chatMessagesList tooltip as the Welcome message
        if (messages.length > 0) {
          chatMessagesList.accessibilityProperties.description = messages[0].toString();
        }
				
				Accessibility.updateProperties();
			}
			
			// Exposes senderID for a given message to accessibilty methods in ChatView.mxml
			public function exposeSenderID(index:int):String{
				return messages.getItemAt(index).senderId;
			}
			
			// Exposes messages.length for a given message to accessibilty methods in ChatView.mxml
			public function exposeNumMessages():int{
				return messages.length;
			}

			public function showNewMessage(chatobj:ChatObject, translate:Boolean, language:String = null):void {	
				var timeString:String = getHours() + ":" + getMinutes();
				//var components:Array = message.split("|");
				
				var msg:ChatMessage = new ChatMessage();
				msg.lastSenderId = lastSenderId;
				lastSenderId = chatobj.userid;
				msg.senderId = chatobj.userid;
				
				msg.senderLanguage = chatobj.language;
				msg.receiverLanguage = language.toString();
				msg.translate = translate;

				msg.translatedText = chatobj.message;
				msg.senderText = chatobj.message;
				
				msg.name = chatobj.username;
				msg.senderColor = uint(chatobj.color);
				msg.translatedColor = msg.senderColor;
				msg.senderTime = chatobj.time;			
				msg.time = timeString;
				msg.lastTime = lastTime;
				lastTime = timeString;
				
				/*********************************
				 * We put a blank message at the end to force the scrollbar to display the
				 * REAL last message.
				 */
				if (!scrollBarWorkaround) {
					scrollBarWorkaround = true;
					var blankStr:String = "                 ";
					var shimMsg:ChatMessage = new ChatMessage();
					shimMsg.lastSenderId = blankStr;
					shimMsg.senderId = blankStr;					
					shimMsg.senderLanguage = blankStr;
					shimMsg.receiverLanguage = blankStr;
					shimMsg.translate = false;	
					shimMsg.translatedText = blankStr;
					shimMsg.senderText = blankStr;					
					shimMsg.name = blankStr;
					shimMsg.senderColor = msg.senderColor;
					shimMsg.translatedColor = 0xCECECE;
					shimMsg.senderTime = blankStr;			
					shimMsg.time = blankStr;
					shimMsg.lastTime = blankStr + "\n";

					// Add to blank lines to force the last message to be displayed.
					messages.addItem(shimMsg);
					messages.addItem(shimMsg);
				}
				
				/**
				 * Add the REAL message before the shim message above. 
				 */				 
				messages.addItemAt(msg, messages.length - 2);
					
				/**
				 * Trigger to force the scrollbar to show the last message.
				 */	
				 if (scrollTimer != null) scrollTimer.start();
			}
			
			/**
			 * Magic sauce to force scrollbar to the bottom message. This took a lot
			 * of trial and error. If you change this, make sure you know what you are
			 * doing as I don't know why it works, but it does. (ralam Nov 3, 2010)
			 */
			private function scrollToBottom():void {
				chatMessagesList.invalidateSize();
				chatMessagesList.invalidateDisplayList();
				chatMessagesList.scrollToIndex(messages.length);		
				chatMessagesList.validateDisplayList();
				chatMessagesList.validateNow();		
			}
			
			private function onScrollTimer(event:TimerEvent):void {
				scrollToBottom();
			}
			
			public static function getMinutes():String {
				var time:Date = new Date();
				var minutes:String;
				if (time.minutes < 10) minutes = "0" + time.minutes;
				else minutes = "" + time.minutes;
				return minutes;
			}
			
			public static function getHours():String {
				var time:Date = new Date();
				var hours:String;
				if (time.hours < 10) hours = "0" + time.hours;
				else hours = "" + time.hours;
				return hours
			}
			
			public function setMessageUnread():void{
				this.read = false;
				backgroundColor = 0xFFFF00;
			}
			
			public function setMessageRead():void{
				this.read = true;
				backgroundColor = 0x000000;
			}
			
			private function onLinkClick(e:TextEvent):void{
				var url:URLRequest = new URLRequest(e.text);
				navigateToURL(url, '_blank');
			}
			
			private function changeFontSize(e:ChatOptionsEvent):void{
				this.setStyle("fontSize", e.fontSize);
			}
			
			private function addContextMenuItems():void{
				var contextMenu:ContextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				var copyAllButton:ContextMenuItem = new ContextMenuItem(COPY_ALL_BUTTON);
				copyAllButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(copyAllButton);
				
				this.contextMenu = contextMenu;
			}
			
			private function menuItemHandler(e:ContextMenuEvent):void{
				if (e.target.caption == COPY_ALL_BUTTON){
					System.setClipboard(getAllAsString());
				}
			}
			
			private function getAllAsString():String{
				var allText:String = "";
				for (var i:int = 0; i < messages.length; i++){
					var item:ChatMessage = messages.getItemAt(i) as ChatMessage;
					allText += "\n" + item.name + " - " + item.time + " : " + item.translatedText;
				}
				return allText;
			}
			
			// Determines for navigateMessages() whether the message to be spoken by the screen-reader needs an extra space added to the end or not
			private function setDescription():Boolean{
				var chatHistorySpacer:Boolean = false;
				if (chatMessagesList.accessibilityProperties.description == messages[currentMessage].toString())
					chatHistorySpacer = true;
				return chatHistorySpacer;
			}
			
			public function getLatestMessage():int{
				return latestMessage;
			}
			
			public function getCurrentMessage():int{
				return currentMessage;
			}
			
			private function localeChanged(e:Event):void {
				loadKeyCombos();
			}

			private function loadKeyCombos():void {
				keyCombos = new Object(); // always start with a fresh array
				// keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.listeners.muteme') as String)] = ShortcutEvent.MUTE_ME_EVENT;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.advance') as String)] = ShortcutEvent.ADVANCE_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.goback') as String)] = ShortcutEvent.GOBACK_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.repeat') as String)] = ShortcutEvent.REPEAT_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.golatest') as String)] = ShortcutEvent.GOLATEST_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.gofirst') as String)] = ShortcutEvent.GOFIRST_MESSAGE;
				keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatbox.goread') as String)] = ShortcutEvent.GOREAD_MESSAGE;
			}
			
			public function handleKeyDown(e:KeyboardEvent) :void {
				LogUtil.debug("WATERFALL: Entering handleKeyDown");
				var keyPress:String = (e.ctrlKey  ? "control+" : "") + 
							(e.shiftKey ? "shift+"   : "") +
							(e.altKey   ? "alt+"     : "") +
							e.keyCode;
				LogUtil.debug("WATERFALL keypress: " + keyPress);		
				if (keyCombos[keyPress]) {
					LogUtil.debug("WATERFALL keypress matched something in keyCombos: " + keyCombos[keyPress]);
					var event:ShortcutEvent = new ShortcutEvent(keyCombos[keyPress]);
					event.otherUserID = otherUserID; 
					globalDispatcher.dispatchEvent(event);
				}
			}
			
			private function advanceMessage(e:ShortcutEvent):void{
				if (e.otherUserID == otherUserID){
					if (currentMessage < (messages.length-3)){
						currentMessage++;
					}
					else{
						chatMessagesList.accessibilityProperties.description += " ";
					}
					navigationMaintenance();
				}
			}
			
			private function goBackOneMessage(e:ShortcutEvent):void{
				if (e.otherUserID == otherUserID){
					if (currentMessage > 0){
						currentMessage--;
					}
					else{
						chatMessagesList.accessibilityProperties.description += " ";
					}
					navigationMaintenance();
				}
			}
			
			private function repeatMessage(e:ShortcutEvent):void{
				if (e.otherUserID == otherUserID){
					chatMessagesList.accessibilityProperties.description += " ";	
					repeat = true;
					navigationMaintenance();
				}
			}
			
			private function goToLatestMessage(e:ShortcutEvent):void{
				if (e.otherUserID == otherUserID){
					currentMessage = messages.length-3;
					navToLatest = true;
					spacerNeeded = setDescription();
					
					indicatorNeeded = true;
					chatMessagesList.accessibilityProperties.description = navLatestString;
					Accessibility.updateProperties();
					navigationMaintenance();
				}
			}
			
			private function goToFirstMessage(e:ShortcutEvent):void{
				if (e.otherUserID == otherUserID){
					currentMessage = 0;
					navToFirst = true;
					spacerNeeded = setDescription();
					
					indicatorNeeded = true;
					chatMessagesList.accessibilityProperties.description = navFirstString;
					Accessibility.updateProperties();
					navigationMaintenance();
				}
			}
			
			private function goToLatestReadMessage(e:ShortcutEvent):void{
				if (e.otherUserID == otherUserID){
					currentMessage = latestMessage;
					chatMessagesList.accessibilityProperties.description = navRecentString;
					Accessibility.updateProperties();
					navigationMaintenance();
				}
			}
			
			private function navigationMaintenance():void{
				// Update the latestMessage counter for new message notifications
				if (currentMessage > latestMessage)
					latestMessage = currentMessage;
					
				if (!repeat){
				// Make it clear to the user that they have either navigated to or reached one end of the message history or the other.
					if (currentMessage == 0){
						if (!navToFirst){
							indicatorNeeded = true;
							chatMessagesList.accessibilityProperties.description = reachedFirst;
							Accessibility.updateProperties();
						}
					}
					else if (currentMessage == messages.length-3){
						if (!navToLatest){
							indicatorNeeded = true;
							chatMessagesList.accessibilityProperties.description = reachedLatest;
							Accessibility.updateProperties();			
						}
					}
					
					// Set the accessibility description to the indicated message
					chatMessagesList.accessibilityProperties.description = messages[currentMessage].toString();
					
					// Add a single space to the end of the accessibilityProperties.description if necessary to ensure that it reflects the current message after being updated.
					if (spacerNeeded || setDescription()){
						chatMessagesList.accessibilityProperties.description += " ";
					}
				}
					
				Accessibility.updateProperties();
				navToFirst = false;
				navToLatest = false;
				spacerNeeded = false;
				indicatorNeeded = false
				repeat = false;
			}
			
		]]>
		
	</mx:Script>
	
	<mx:List width="100%" height="100%" id="chatMessagesList" selectable="false" variableRowHeight="true"
			 itemRenderer="org.bigbluebutton.modules.chat.views.ChatMessageRenderer" dataProvider="{messages}" />
</mx:VBox>
