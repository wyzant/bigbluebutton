<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
  xmlns:views="org.bigbluebutton.main.views.*"
  xmlns:maps="org.bigbluebutton.main.maps.*"
  xmlns:apimap="org.bigbluebutton.main.api.maps.*"
  xmlns:coreMap="org.bigbluebutton.core.controllers.maps.*"
  xmlns:mate="http://mate.asfusion.com/"
  xmlns:m="library://melomel/2010"
  pageTitle="BigBlueButton" 
  layout="absolute" preinitialize="init()"
  preloader="org.bigbluebutton.main.model.BigBlueButtonPreloader"
  applicationComplete="hotkeyCapture()">
  
  <mx:Script>
    <![CDATA[
      import com.asfusion.mate.events.Dispatcher;      
      import flash.events.Event;      
      import mx.controls.Alert;
      import mx.managers.HistoryManager;
      import mx.utils.URLUtil;      
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.events.AddUIComponentToMainCanvas;
      import org.bigbluebutton.core.BBB;
      import org.bigbluebutton.core.EventBroadcaster;
      import org.bigbluebutton.core.managers.ConfigManager2;
      import org.bigbluebutton.main.api.ExternalApiCallbacks;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.main.views.MainApplicationShell;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      private var langResources:ResourceUtil = null; //ResourceUtil.getInstance();

      public var myFoo:String = "bar";

    /**
     * Thse two lines are workaround for this. (ralam - Nov 8, 2008)
     * http://gregjessup.com/flex-3-advanceddatagrid-cannot-convert-mxmanagersdragmanagerimpl-to-mxmanagersidragmanager/
     * http://butterfliesandbugs.wordpress.com/2007/10/25/workaround-for-error-when-loading-popups-from-modules/
     */
    import mx.managers.IDragManager; 
    private var iDragManager:IDragManager;  

    /** another workaround - for this issue: https://bugs.adobe.com/jira/browse/SDK-13121*/
    private var hist:HistoryManager

    private function handleChatEvent(e:Event):void {
      trace('Got CHAT_EVENT');
    }

    public function setFoo(f:String):void {
      myFoo = f;
    }

    /******************************
     * Testing
     ******************************/

    private var globalDispatcher:Dispatcher = new Dispatcher();

    // Login test
    private static var isLoggedIn:Boolean = false;	// flag to indicate if we successfully logged in
    
    // Chat test
    private static var chatMessageSent:String = "";
    private static var chatTestSucceeded:Boolean = false;
  
    // Voice test
    private static var didUserJoin:Boolean = false;
    
    // Presentation test
    private static var didPresentationConvert:Boolean = false;

    // Video test
    private static var didVideoStart:Boolean = false;


    public  function handleLoginEvent(event:BBBEvent):void {
      LogUtil.debug("******************* Received loggedin event");
      isLoggedIn = true;
      LogUtil.debug("******************* Received loggedin event " + isLoggedIn.toString());
    }

    public function checkLogin():String {
      LogUtil.debug("******************* " + isLoggedIn.toString());
      return isLoggedIn.toString();
    }

    public function checkChat():String {
      if (chatTestSucceeded)
      {
          chatTestSucceeded = false;
          return "true";
      } else {
        return chatTestSucceeded.toString();
      }
    }

    public function handleReceivedPublicChatMessageEvent(event:BBBEvent):void {
      if (event.message.search(chatMessageSent) != -1) {
        chatTestSucceeded = true;
      }
    }

    // Creates a random string and sends it as a chat message.
    public function sendRandomChatMessage():void {
      chatMessageSent = generateRandomString(15);
      globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT, chatMessageSent));
    }

    /**
     * Voice
     */ 
    public function joinVoiceConference():void {
      globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.JOIN_VOICE_CONFERENCE));
    }

    public function checkVoice():String {
      return didUserJoin.toString();
    }

    public function handleAddedListenerEvent(event:BBBEvent):void {
      // if (event.message == _attributes.username) {
      didUserJoin = true;
      // }
    }
  
    /**
     * Presentation
     */ 

    public function checkPresentation():String {
      if (didPresentationConvert) {
        didPresentationConvert = false;
        return "true";
      } else {
        return "false";
      }
    }
      
    public function handlePresentationConversion(event:Event):void {
      didPresentationConvert = true;
    }

    // Obtained from: http://www.zedia.net/2008/generate-random-strings-in-as2-or-as3/
    private function generateRandomString(newLength:uint = 1, userAlphabet:String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"):String{
      var alphabet:Array = userAlphabet.split("");
      var alphabetLength:int = alphabet.length;
      var randomLetters:String = "";
      for (var i:uint = 0; i < newLength; i++){
        randomLetters += alphabet[int(Math.floor(Math.random() * alphabetLength))];
      }
      return randomLetters;
    }


    /**
      * Video
      */

    public function startVideoConnection():String {
      globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.START_VIDEO_CONNECTION));
      return "true";
    }

    public function playVideo():String {
      globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.START_VIDEO_STREAM, "640x480avatar.flv"));
      return "true";
    }

    public function videoHasStarted(e:Event):void {
      didVideoStart = true;
    }
  
    public function checkVideo():String {
      return didVideoStart.toString();
    }

    /**
     * Desktop Sharing
     */

    public function startDeskshare():String {
      globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.START_DESKSHARE));
      return "true";
    }

    protected function init():void {
      setupAPI();
      EventBroadcaster.getInstance().addEventListener("configLoadedEvent", configLoadedEventHandler);
      BBB.initConfigManager();
    }

    private function configLoadedEventHandler(e:Event):void {
      LogUtil.debug("***** Config Loaded ****");
      mainShell.initOptions(null);
    }
      
    private var api:ExternalApiCallbacks;
      
    private function setupAPI():void {
      langResources = ResourceUtil.getInstance();
      api = new ExternalApiCallbacks();
      Security.allowDomain(determineHTMLURL());
      LogUtil.debug("Security.allowDomain(" + determineHTMLURL() + ");");
    }
      
      private function determineHTMLURL():String {
        var serverName:String = "*";
        if(ExternalInterface.available) // import flash.external.ExternalInterface;
        {
          try
          {
            var htmlURL:String = String(ExternalInterface.call("window.location.href.toString"));
            serverName = URLUtil.getServerName(htmlURL);
//            Alert.show("HTML URL [" + htmlURL + "]");
          }
          catch(s:Error)
          {
//            Alert.show("Cannot determine HTML URL");
          }
        }
        
        return serverName;
      }

    /**
     * Shortcut Keys
     */

    private function localeChanged(e:Event):void{
      loadKeyCombos();
    }

    private var keyCombos:Object;

    private function loadKeyCombos():void {
      keyCombos = new Object(); // always start with a fresh array
      keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.listeners.muteme') as String)] = ShortcutEvent.MUTE_ME_EVENT;
      keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chatinput') as String)] = ShortcutEvent.FOCUS_CHAT_INPUT;
      keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.chat.chattabs') as String)] = ShortcutEvent.FOCUS_CHAT_TABS;
      keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.present.focusslide') as String)] = ShortcutEvent.FOCUS_SLIDE;
      keyCombos[(ResourceUtil.getInstance().getString('bbb.shortcutkey.whiteboard.undo') as String)] = ShortcutEvent.UNDO_WHITEBOARD;
    }

    public function hotkeyCapture():void{
      LogUtil.debug("Entering hotkeyCapture");
      stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
      ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
      LogUtil.debug("Leaving hotkeyCapture");
    }

    public function handleKeyDown(e:KeyboardEvent) :void
    {
      var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") +
                            (e.altKey   ? "alt+"     : "") + e.keyCode;
      //LogUtil.debug("Chad keypress " + keyPress);

      if (keyCombos[keyPress])
      {
        LogUtil.debug("Chad keypress " + keyPress);
        globalDispatcher.dispatchEvent(new ShortcutEvent(keyCombos[keyPress]));
      }
    }
    ]]>
  </mx:Script>
  
  <apimap:ExternalApiEventMap/>
  <coreMap:BbbCoreEventMap/>
  <maps:ApplicationEventMap />	
  <views:MainApplicationShell id="mainShell"/>	
  
  <mate:Listener type="{BBBEvent.LOGIN_EVENT}" method="handleLoginEvent"/>
  <mate:Listener type="{BBBEvent.RECEIVED_PUBLIC_CHAT_MESSAGE_EVENT}" method="handleReceivedPublicChatMessageEvent"/>
  <mate:Listener type="{BBBEvent.ADDED_LISTENER}" method="handleAddedListenerEvent"/>
  <mate:Listener type="{BBBEvent.PRESENTATION_CONVERTED}" method="handlePresentationConversion"/>
  <mate:Listener type="{BBBEvent.VIDEO_STARTED}" method="videoHasStarted"/>
</mx:Application>
